#!/bin/sh
# Copyright (C) 2013-2016 SÃ¶ren Tempel
# Copyright (C) 2016, 2017 Klemens Nanni <kl3@posteo.org>
# Copyright (C) 2022, 2023 Daniel James Perry <dperry45@gatech.edu>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -eu
umask u=rwx,go=

## Variables
STORE_DIR="${PASSWORD_STORE_DIR:-${HOME}/.spm}"
AGE_PUBLIC_KEY="${AGE_KEY_FILE:-${HOME}/.key.age}"

die() {
    echo "${1}" >&2
    exit 1
}

check() {
	[ -n "${entry}" ] || die 'no such entry'

	[ $(printf '%s' "${entry}" | wc -l) -eq 0 ] ||
		die 'ambigious expression'
}

rage() {
	command rage -i "${AGE_PUBLIC_KEY}" "${@}"
}

readpw() {
	[ -t 0 ] && stty -echo && printf '%s' "${1}"
	IFS= read -r "${2}"
	[ -t 0 ] && stty echo
	[ -n "$(eval echo \"\$$2\")" ] || die 'empty password'
}

find() {
	command find "${STORE_DIR}" -type f -o -type l | grep -ie "${1}" | head -n 1
}

munge() {
	abspath="$(readlink -f "${STORE_DIR}"/"${1}")"
	case "${abspath}" in
	"${STORE_DIR}"*)
		eval ${2}=\"${abspath#${STORE_DIR}}\"
		;;
	*)
		die 'bad traversal'
	esac
}

view() {
	less -EiKRX
}

edit() {
    [ -f "${1}.rage" ] || die "Failed to access ${1}"

    # we use /dev/shm because it's an in-memory
    # space that we can use to store private data,
    # and securely wipe it without worrying about
    # residual badness
    [ -d /dev/shm ] || die "Failed to access /dev/shm"

    # get base dirname in case we're dealing with
    # a nested item (foo/bar)
    tmpfile="/dev/shm/pa/${1}.txt"
    tmpdir="$(dirname "$tmpfile")"
    mkdir -p "$tmpdir"
    trap 'rm -rf /dev/shm/pa' EXIT

    rage --decrypt "${1}" 2>/dev/null >"$tmpfile" || die "Could not decrypt ${1}"

    "${EDITOR:-vi}" "$tmpfile"

    [ -f "$tmpfile" ] || die "New password not saved"

    rm "${1}"
    rage -r "${PASSWORD_STORE_KEY}" -o "${1}" "$tmpfile"
}

## Commands
add() {
	[ -e "${STORE_DIR}"/"${1}" ] && die 'entry already exists'

	password=
	readpw "Password for '${1}': " password
	[ -t 0 ] && printf '\n'

	group="${1%/*}"
	[ "${group}" = "${1}" ] && group=

	mkdir -p "${STORE_DIR}"/"${group}" &&
		printf '%s\n' "${password}" |
			rage --encrypt --output "${STORE_DIR}"/"${1}"
}

list() {
	[ -d "${STORE_DIR}"/"${1:-}" ] || die 'no such group'

	tree ${gflag:+-d} -Fx -- "${STORE_DIR}"/"${1:-}" | view
}

search() {
	find "${1}" | view
}

show() {
	entry=$(find "${1}")
	check; rage --decrypt "${entry}"
}

## Parse input
[ ${#} -eq 0 ] || [ ${#} -gt 3 ] ||
[ ${#} -eq 3 ] && [ "${1:-}" != list ] &&
	die 'wrong number of arguments'

case "${1}" in
add|search|show)
	[ -z "${2:-}" ] && die 'empty name'
	${1} "${2}"
	;;
list)
	[ "${2:-}" = -g ] && gflag=1 && shift 1
	[ ${#} -gt 2 ] && die 'too many arguments'
	[ -n "${2:-}" ] && munge "${2}" relpath
	list "${relpath:-}"
	;;
help)
	die
	;;
*)
	die 'invalid command'
	;;
esac
